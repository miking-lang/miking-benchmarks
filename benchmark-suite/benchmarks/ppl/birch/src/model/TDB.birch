class TDB < BirthDeathModel<TDBDParameter> {
  λ_k:Real;
  λ_θ:Real;
  z_σ2:Real;
  ρ:Real;

  override function init() {
    θ.λ ~ Gamma(λ_k, λ_θ);
    θ.μ <- 0.0;
    θ.z ~ Gaussian(0.0, z_σ2);
  }

  override function step() {
    let Δ <- (exp(θ.z*(T - ν.t)) - exp(θ.z*(T - ν.t - ν.Δ)))/θ.z;
    let count <~ Poisson(θ.λ*Δ);
    for i in 1..count {
      let u <~ Uniform(0.0, 1.0);
      let t <- ν.t + ν.Δ - log(u*exp(θ.z.value()*ν.Δ) - u + 1.0)/θ.z.value();
      if survives(t) {
        factor -inf;
        return;
      }
      factor log(2);
    }
    if ν.isSpeciation() {
      0.0 ~> Exponential(θ.λ*exp(θ.z*(T - ν.t)));
    }
    if ν.isLeaf() {
      true ~> Bernoulli(ρ);
    }
  }

  function survives(t:Real) -> Boolean {
    let detected <~ Bernoulli(ρ);
    if detected {
      return true;
    }
    let Δ <- (exp(θ.z*T) - exp(θ.z*(T - t)))/θ.z;
    let count <~ Poisson(θ.λ*Δ);
    for i in 1..count {
      let u <~ Uniform(0.0, 1.0);
      let t' <- t - log(u*exp(θ.z.value()*t) - u + 1.0)/θ.z.value();
      if survives(t') {
        return true;
      }
    }
    return false;
  }

  override function read(buffer:Buffer) {
    super.read(buffer);
    λ_k <-? buffer.get<Real>("λ_k");
    λ_θ <-? buffer.get<Real>("λ_θ");
    z_σ2 <-? buffer.get<Real>("z_σ2");
    ρ <-? buffer.get<Real>("ρ");
  }
}
