final class CRBDFast < BirthDeathModel<CRBDFastParameter> {
  λ_k:Real;
  λ_θ:Real;
  μ_k:Real;
  μ_θ:Real;
  ρ:Real;
  λ:Real;
  μ:Real;

  override function init() {
    λ <- simulate_gamma(λ_k, λ_θ);
    μ <- simulate_gamma(μ_k, μ_θ);
  }

  override function step() {
    let count <- simulate_poisson(λ*ν.Δ);
    for i in 1..count {
      let t <- simulate_uniform(ν.t, ν.t + ν.Δ);
      if survives(t) {
        factor -inf;
        return;
      }
      factor log(2);
    }
    factor logpdf_poisson(0, μ*ν.Δ);
    if ν.isSpeciation() {
      factor logpdf_exponential(0.0, λ);
    }
    if ν.isLeaf() {
      factor logpdf_bernoulli(true, ρ);
    }
  }

  function survives(t:Real) -> Boolean {
    let Δ <- simulate_exponential(μ);
    if Δ >= t {
      let detected <- simulate_bernoulli(ρ);
      if detected {
        return true;
      }
      Δ <- t;
    }
    let count <- simulate_poisson(λ*Δ);
    for i in 1..count {
      let t' <- simulate_uniform(t - Δ, t);
      if survives(t') {
        return true;
      }
    }
    return false;
  }

  override function read(buffer:Buffer) {
    super.read(buffer);
    λ_k <-? buffer.get<Real>("λ_k");
    λ_θ <-? buffer.get<Real>("λ_θ");
    μ_k <-? buffer.get<Real>("μ_k");
    μ_θ <-? buffer.get<Real>("μ_θ");
    ρ <-? buffer.get<Real>("ρ");
  }

  override function write(buffer:Buffer) {
    buffer.set("λ", λ);
    buffer.set("μ", μ);
  }
}
