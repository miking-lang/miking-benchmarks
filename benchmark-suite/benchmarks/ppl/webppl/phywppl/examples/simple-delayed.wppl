///////////////////////////////////////////////////////////////////////

var k_lambda = 1000
var theta_lambda = 0.0001

var x = 1
var t = 1
 
var k_mu = 10
var theta_mu = 0.1

var model = function()
{
    var lambda = gamma({
      shape: k_lambda,
      scale: theta_lambda
    }) // lambda is sampled immediately

    // var t1 = exponential({a: lambda})
    observe(Exponential({a: lambda}), 10)
    return lambda
}

 var model_delayed = function()
 {
     var ret_0 = delayed_observe(10, k_lambda, theta_lambda)
     factor( ret_0.prob)
     //var ret_0 = delayed_sample(k_lambda, theta_lambda)
     return gamma({
       shape: ret_0.k,
       scale: ret_0.theta
     })
 }
 
var model_waiting_time = function()
{
  var lambda = gamma({
      shape: k_lambda,
      scale: theta_lambda
    }) // lambda is sampled immediately

  var t1 = exponential({
    a: lambda
  })
  
  var t2 = exponential({
    a: lambda
  })
  
  return (t1 + t2)
}

var model_waiting_time_delayed = function()
{
  var ret_0 = delayed_sample(k_lambda, theta_lambda)
  var ret_1 = delayed_sample(ret_0.k, ret_0.theta)
  return (ret_0.t + ret_1.t)
}


/** 
 * Observe a number of Poisson with parameters mu * t
 */
var model_poisson = function() {
    var mu = gamma({
	shape: k_mu,
	scape: theta_mu
    })

    observe (Poisson({mu: mu*t}), x)

    return (mu)
}

/**
 * Observe from Poisson, delayed
 */ 


var model_poisson_delayed = function() {
    var ret_0 = delayed_observe_poisson(x, t, k_mu, theta_mu)

    return gamma({
	shape: ret_0.k,
	scale: ret_0.theta
    })
}



var dist = Infer({
    method: 'SMC',
    particles: 20000,
    model: model
})

var dist_delayed = Infer({
    method: 'SMC',
    particles: 20000,
    model: model_delayed
})

var dist_waiting_time = Infer({
    method: 'SMC',
    particles: 20000,
    model: model_waiting_time
})

var dist_waiting_time_delayed = Infer({
    method: 'SMC',
    particles: 20000,
    model: model_waiting_time_delayed
})



//sample(dist)
console.log("Immediate sampling log Z:", dist.normalizationConstant)
viz(dist)
console.log("Delayed sampling log Z:", dist_delayed.normalizationConstant)
viz(dist_delayed)

console.log("Immediate sampling (waiting time) log Z:", dist_waiting_time.normalizationConstant)
viz(dist_waiting_time)

console.log("Delayed sampling (waiting time) log Z:", dist_waiting_time_delayed.normalizationConstant)
viz(dist_waiting_time_delayed)
